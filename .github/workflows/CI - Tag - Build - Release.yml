name: Check, Tag, Build, and Release Version

on:
  push:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  tag_version:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java environment
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          $version = python -c "import xml.etree.ElementTree as ET; \
                     tree = ET.parse('pom.xml'); \
                     root = tree.getroot(); \
                     ns = {'m': 'http://maven.apache.org/POM/4.0.0'}; \
                     version = root.find('m:version', ns).text; \
                     print(version)"
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Found version: $version"

      - name: Update gh.token.properties with secrets
        run: |
          $filePath = "src/main/resources/gh.token.properties"
          $content = Get-Content -Path $filePath
          $content = $content -replace "ghReleaseDownloadToken=.*", "ghReleaseDownloadToken=$env:ghReleaseDownloadToken"
          $content = $content -replace "ghReleaseFetchReleasesToken=.*", "ghReleaseFetchReleasesToken=$env:ghReleaseFetchReleasesToken"
          Set-Content -Path $filePath -Value $content
        env:
          ghReleaseDownloadToken: ${{ secrets.ghReleaseDownloadToken }}
          ghReleaseFetchReleasesToken: ${{ secrets.ghReleaseFetchReleasesToken }}

      - name: Fetch all tags
        run: git fetch --tags

      - name: Prepare tag name
        id: prepare_tag
        run: echo "TAG_NAME=v${{ env.VERSION }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Check for existing tag
        id: check_tag
        run: |
          $tagExists = git tag -l "${{ env.TAG_NAME }}"
          if ($tagExists) {
            echo "TAG_EXISTS=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            echo "TAG_EXISTS=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

      - name: Create tag if it does not exist
        id: create_tag
        run: |
          if ($env:TAG_EXISTS -eq "false") {
            git config --global user.name "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag "${{ env.TAG_NAME }}"
            git push origin "${{ env.TAG_NAME }}"
            echo "TAG_CREATED=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            echo "TAG_CREATED=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

      - name: Interrupt workflow if tag is not created
        if: env.TAG_CREATED == 'false'
        run: |
          echo "Tag was not created, interrupting the workflow."
          exit 1

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Create ZIP of Config Files
        run: |
          # Ensure temp directory exists
          $tempZipFolder = "${{ github.workspace }}/temp_zip_folder"
          New-Item -ItemType Directory -Path $tempZipFolder -Force

          # Copy the .gitignore file to the temp directory
          Copy-Item -Path "${{ github.workspace }}/config/.gitignore" -Destination $tempZipFolder -Force

          # Create a subdirectory for the config files within the temp directory
          $configTempFolder = Join-Path -Path $tempZipFolder -ChildPath "config"
          New-Item -ItemType Directory -Path $configTempFolder -Force

          # Gather files and directories to zip
          $itemsToZip = Get-ChildItem -Path "${{ github.workspace }}/config" -Recurse | ForEach-Object { $_.FullName }

          # Copy files and directories to the config subdirectory in the temp directory
          foreach ($item in $itemsToZip) {
            $relativePath = $item.Substring("${{ github.workspace }}/config".Length).TrimStart('\', '/')
            $destinationPath = Join-Path -Path $configTempFolder -ChildPath $relativePath
            if (Test-Path -Path $item -PathType Container) {
              New-Item -ItemType Directory -Path $destinationPath -Force
            } else {
              Copy-Item -Path $item -Destination $destinationPath -Force
            }
          }

          # Remove the .gitignore file from the config subdirectory (if it was copied again)
          Remove-Item -Path "$configTempFolder/.gitignore" -Force

          # Create ZIP file
          $zipFilePath = "${{ github.workspace }}/example-config.zip"
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory($tempZipFolder, $zipFilePath)

          # Clean up temp directory
          Remove-Item -Path $tempZipFolder -Recurse -Force
        shell: pwsh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: true
          prerelease: false

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/script-control-panel.jar
          asset_name: script-control-panel.jar
          asset_content_type: application/java-archive

      - name: Upload Default Files Zip to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./example-config.zip
          asset_name: example-config.zip
          asset_content_type: application/zip

      - name: Upload verify-download-run.sh to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./verify-download-run.sh
          asset_name: verify-download-run.sh
          asset_content_type: application/x-sh

#      - name: Publish JAR to GitHub Packages
#        run: mvn deploy -s settings.xml
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
